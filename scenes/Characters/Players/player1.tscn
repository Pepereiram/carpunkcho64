[gd_scene load_steps=30 format=3 uid="uid://ns14ka6ue5dy"]

[ext_resource type="Script" path="res://scripts/soldier.gd" id="1_kk7r7"]
[ext_resource type="Script" path="res://scenes/Characters/Carpinchos/inputSync.gd" id="2_t1mkr"]
[ext_resource type="PackedScene" uid="uid://dqm3qur65rpe5" path="res://scenes/Weapons/FastGun.tscn" id="3_2nyv7"]
[ext_resource type="Shader" path="res://scenes/Characters/Players/player2.gdshader" id="3_ahvyi"]
[ext_resource type="Script" path="res://components/hurtbox3d.gd" id="4_4l0le"]
[ext_resource type="PackedScene" uid="uid://mlcg22thcs0u" path="res://scenes/Characters/Players/stats.tscn" id="5_0hx0c"]
[ext_resource type="PackedScene" uid="uid://dtk8qb2aaqwp4" path="res://ui/hud.tscn" id="6_fxrst"]
[ext_resource type="PackedScene" uid="uid://ciriwn64b4c0l" path="res://scenes/Characters/Players/resurrect_area.tscn" id="7_qmpat"]

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_80kuh"]
properties/0/path = NodePath("InputSync:move_input")
properties/0/spawn = true
properties/0/replication_mode = 1

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_syx0w"]
properties/0/path = NodePath("Cuerpo:rotation")
properties/0/spawn = true
properties/0/replication_mode = 1
properties/1/path = NodePath(".:vivo")
properties/1/spawn = true
properties/1/replication_mode = 1
properties/2/path = NodePath("Cuerpo:visible")
properties/2/spawn = true
properties/2/replication_mode = 1
properties/3/path = NodePath("Muelto:visible")
properties/3/spawn = true
properties/3/replication_mode = 1

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_6hik0"]
properties/0/path = NodePath(".:id")
properties/0/spawn = true
properties/0/replication_mode = 0

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_nmlgm"]
properties/0/path = NodePath(".:position")
properties/0/spawn = false
properties/0/replication_mode = 1
properties/1/path = NodePath(".:SPEED")
properties/1/spawn = false
properties/1/replication_mode = 1
properties/2/path = NodePath(".:mejorando")
properties/2/spawn = false
properties/2/replication_mode = 2

[sub_resource type="CapsuleMesh" id="CapsuleMesh_yo1pd"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_gv81v"]
albedo_color = Color(0.65098, 0, 0.156863, 1)

[sub_resource type="Shader" id="Shader_ov20a"]
code = "shader_type spatial;
render_mode unshaded, depth_draw_opaque, depth_prepass_alpha;

// Inspired by https://godotshaders.com/shader/3d-pixel-art-outline-highlight-post-processing-shader/

uniform sampler2D DEPTH_TEXTURE : hint_depth_texture, filter_linear_mipmap;
uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
uniform sampler2D NORMAL_TEXTURE : hint_normal_roughness_texture, filter_nearest;


uniform vec3 shadow_color : source_color = vec3(0.0);
uniform float shadow_thickness = 2.0;

vec2 getDepth(vec2 screen_uv, sampler2D depth_texture, mat4 inv_projection_matrix){
	float raw_depth = texture(depth_texture, screen_uv)[0];
	vec3 normalized_device_coordinates = vec3(screen_uv * 2.0 - 1.0, raw_depth);
    vec4 view_space = inv_projection_matrix * vec4(normalized_device_coordinates, 1.0);	
	view_space.xyz /= view_space.w;	
	return vec2(-view_space.z, raw_depth);
}


void fragment() {
	vec2 e = vec2(1./VIEWPORT_SIZE.xy)*1.0;

	float depth_diff = 0.0;
	float neg_depth_diff = .5;
	
	vec2 depth_data = getDepth(SCREEN_UV, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
	float depth = depth_data.x;
	vec3 color = texture(SCREEN_TEXTURE, SCREEN_UV).rgb;
	vec3 c = vec3(0.0);
	
	vec2 min_depth_data = depth_data;
	float min_depth = 9999999.9;
	

	vec3 normal = texture(NORMAL_TEXTURE, SCREEN_UV).rgb * 2.0 - 1.0;
	
	for (float x = -shadow_thickness; x <= shadow_thickness;x += 1.0){
		for (float y = -shadow_thickness; y <= shadow_thickness; y += 1.0){
			if ((x == 0.0 && y == 0.0) || (shadow_thickness*shadow_thickness < (x*x + y*y))){
				continue;
			}
			
			vec2 du_data = getDepth(SCREEN_UV+1.0*vec2(x, y)*e, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
			vec2 dd_data = getDepth(SCREEN_UV+0.5*vec2(x, y)*e, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
			
			float du = du_data.x;
			float dd = dd_data.x;
			
			float dd_diff = clamp(abs((depth - dd) - (dd - du)), 0.0, 1.0);

			float val = clamp(abs(depth - du), 0., 1.)/(x*x + y*y)*dd_diff*dd_diff*5000.0;
			
			val = clamp(val, 0.0, 1.0);

			depth_diff += val;

			if (du < min_depth){
				min_depth = du;
				min_depth_data = du_data;
				c = texture(SCREEN_TEXTURE, SCREEN_UV+vec2(x, y)*e).rgb;
				
				c *= clamp(0.5+ 0.5*dot(normalize(vec2(x, y)), (vec2(0.0, 1.0))), 0.0, 1.0);
				
			}
			
			vec3 nu = texture(NORMAL_TEXTURE, SCREEN_UV+vec2(x, y)*e).rgb * 2.0 - 1.0;
			
			depth_diff += (1.0-abs(dot(nu, normal)))/max(min(dd, depth), 2.0);
		}
	}


	depth_diff = smoothstep(0.2, 0.3, depth_diff);

	vec3 final = c*shadow_color;
	ALBEDO = final;

	float alpha_mask = depth_diff;
	DEPTH = min_depth_data.y*alpha_mask + depth_data.y*(1.0-alpha_mask);
	ALPHA = clamp((alpha_mask) * 5., 0., 1.);

}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_6rvsb"]
render_priority = 0
next_pass = SubResource("StandardMaterial3D_gv81v")
shader = SubResource("Shader_ov20a")
shader_parameter/shadow_color = Color(0, 0, 0, 1)
shader_parameter/shadow_thickness = 1.75

[sub_resource type="CapsuleMesh" id="CapsuleMesh_4cn6m"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_jk4c2"]
albedo_color = Color(1, 1, 0.956863, 1)
emission_enabled = true
emission = Color(0, 0.552941, 0.709804, 1)
emission_energy_multiplier = 2.82

[sub_resource type="Shader" id="Shader_vt8sq"]
code = "shader_type spatial;
render_mode unshaded, depth_draw_opaque, depth_prepass_alpha;

// Inspired by https://godotshaders.com/shader/3d-pixel-art-outline-highlight-post-processing-shader/

uniform sampler2D DEPTH_TEXTURE : hint_depth_texture, filter_linear_mipmap;
uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
uniform sampler2D NORMAL_TEXTURE : hint_normal_roughness_texture, filter_nearest;


uniform vec3 shadow_color : source_color = vec3(0.0);
uniform float shadow_thickness = 2.0;

vec2 getDepth(vec2 screen_uv, sampler2D depth_texture, mat4 inv_projection_matrix){
	float raw_depth = texture(depth_texture, screen_uv)[0];
	vec3 normalized_device_coordinates = vec3(screen_uv * 2.0 - 1.0, raw_depth);
    vec4 view_space = inv_projection_matrix * vec4(normalized_device_coordinates, 1.0);	
	view_space.xyz /= view_space.w;	
	return vec2(-view_space.z, raw_depth);
}


void fragment() {
	vec2 e = vec2(1./VIEWPORT_SIZE.xy)*1.0;

	float depth_diff = 0.0;
	float neg_depth_diff = .5;
	
	vec2 depth_data = getDepth(SCREEN_UV, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
	float depth = depth_data.x;
	vec3 color = texture(SCREEN_TEXTURE, SCREEN_UV).rgb;
	vec3 c = vec3(0.0);
	
	vec2 min_depth_data = depth_data;
	float min_depth = 9999999.9;
	

	vec3 normal = texture(NORMAL_TEXTURE, SCREEN_UV).rgb * 2.0 - 1.0;
	
	for (float x = -shadow_thickness; x <= shadow_thickness;x += 1.0){
		for (float y = -shadow_thickness; y <= shadow_thickness; y += 1.0){
			if ((x == 0.0 && y == 0.0) || (shadow_thickness*shadow_thickness < (x*x + y*y))){
				continue;
			}
			
			vec2 du_data = getDepth(SCREEN_UV+1.0*vec2(x, y)*e, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
			vec2 dd_data = getDepth(SCREEN_UV+0.5*vec2(x, y)*e, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
			
			float du = du_data.x;
			float dd = dd_data.x;
			
			float dd_diff = clamp(abs((depth - dd) - (dd - du)), 0.0, 1.0);

			float val = clamp(abs(depth - du), 0., 1.)/(x*x + y*y)*dd_diff*dd_diff*5000.0;
			
			val = clamp(val, 0.0, 1.0);

			depth_diff += val;

			if (du < min_depth){
				min_depth = du;
				min_depth_data = du_data;
				c = texture(SCREEN_TEXTURE, SCREEN_UV+vec2(x, y)*e).rgb;
				
				c *= clamp(0.5+ 0.5*dot(normalize(vec2(x, y)), (vec2(0.0, 1.0))), 0.0, 1.0);
				
			}
			
			vec3 nu = texture(NORMAL_TEXTURE, SCREEN_UV+vec2(x, y)*e).rgb * 2.0 - 1.0;
			
			depth_diff += (1.0-abs(dot(nu, normal)))/max(min(dd, depth), 2.0);
		}
	}


	depth_diff = smoothstep(0.2, 0.3, depth_diff);

	vec3 final = c*shadow_color;
	ALBEDO = final;

	float alpha_mask = depth_diff;
	DEPTH = min_depth_data.y*alpha_mask + depth_data.y*(1.0-alpha_mask);
	ALPHA = clamp((alpha_mask) * 5., 0., 1.);

}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_jlalx"]
render_priority = 0
next_pass = SubResource("StandardMaterial3D_jk4c2")
shader = SubResource("Shader_vt8sq")
shader_parameter/shadow_color = Color(0, 0, 0, 1)
shader_parameter/shadow_thickness = 1.75

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_rxyhx"]
albedo_color = Color(0.65098, 0, 0.156863, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_v38fo"]
render_priority = 0
next_pass = SubResource("StandardMaterial3D_rxyhx")
shader = ExtResource("3_ahvyi")
shader_parameter/shadow_color = Color(0, 0, 0, 1)
shader_parameter/shadow_thickness = 1.75

[sub_resource type="CapsuleMesh" id="CapsuleMesh_g651b"]

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_ue3v2"]

[sub_resource type="CapsuleMesh" id="CapsuleMesh_a0ryl"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_4tjhk"]
albedo_color = Color(0.65098, 0, 0.156863, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_sj54u"]
render_priority = 0
next_pass = SubResource("StandardMaterial3D_4tjhk")
shader = ExtResource("3_ahvyi")
shader_parameter/shadow_color = Color(0, 0, 0, 1)
shader_parameter/shadow_thickness = 1.75

[sub_resource type="CapsuleMesh" id="CapsuleMesh_wjybc"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_tbmoc"]
render_priority = 0
next_pass = SubResource("StandardMaterial3D_jk4c2")
shader = SubResource("Shader_vt8sq")
shader_parameter/shadow_color = Color(0, 0, 0, 1)
shader_parameter/shadow_thickness = 3.0

[node name="Player" type="CharacterBody3D"]
transform = Transform3D(10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0)
script = ExtResource("1_kk7r7")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(-1, 8.24083e-08, -2.91823e-08, 0, 0.333807, 0.942641, 8.74228e-08, 0.942641, -0.333807, 0, 10.516, -3.881)
fov = 60.0

[node name="InputSync" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_80kuh")
script = ExtResource("2_t1mkr")

[node name="RotationSync" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_syx0w")

[node name="ServerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_6hik0")

[node name="MultiplayerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_nmlgm")

[node name="Cuerpo" type="MeshInstance3D" parent="."]
mesh = SubResource("CapsuleMesh_yo1pd")
surface_material_override/0 = SubResource("ShaderMaterial_6rvsb")

[node name="SpotLight3D" type="SpotLight3D" parent="Cuerpo"]
transform = Transform3D(0.1, 0, 0, 0, -0.0995929, 0.00901461, 0, -0.00901461, -0.0995929, 0, -0.364014, -0.0210142)
light_energy = 10.0
shadow_enabled = true
spot_range = 56.8606
spot_angle = 30.0
spot_angle_attenuation = 1.27456

[node name="visor" type="MeshInstance3D" parent="Cuerpo"]
transform = Transform3D(0.548982, 0, 0, 0, 0.177499, 0, 0, 0, 0.216165, 0, 0.436482, 0.486933)
mesh = SubResource("CapsuleMesh_4cn6m")
surface_material_override/0 = SubResource("ShaderMaterial_jlalx")

[node name="helmetLight" type="OmniLight3D" parent="Cuerpo/visor"]
transform = Transform3D(0.182155, 0, 0, 0, 0.563383, 0, 0, 0, 0.46261, -0.00663876, 0.0256846, 0.279731)
light_color = Color(0, 0.552941, 0.709804, 1)
light_energy = 9.267
shadow_enabled = true
omni_range = 3.419

[node name="mano" type="Marker3D" parent="Cuerpo"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.561038, 0, 0)

[node name="Gun" parent="Cuerpo/mano" instance=ExtResource("3_2nyv7")]

[node name="backpack" type="MeshInstance3D" parent="Cuerpo"]
transform = Transform3D(0.815, 0, 0, 0, 0.545, 0, 0, 0, 0.545, 0, 0, -0.46)
material_override = SubResource("ShaderMaterial_v38fo")
mesh = SubResource("CapsuleMesh_g651b")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_ue3v2")

[node name="Hurtbox" type="Area3D" parent="."]
script = ExtResource("4_4l0le")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Hurtbox"]
shape = SubResource("CapsuleShape3D_ue3v2")

[node name="Stats" parent="." instance=ExtResource("5_0hx0c")]

[node name="HUD" parent="." instance=ExtResource("6_fxrst")]

[node name="Muelto" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.0199303, 0.999801, 0, -0.999801, 0.0199303, -0.0929605, -0.42271, -0.0081141)
visible = false
mesh = SubResource("CapsuleMesh_a0ryl")
surface_material_override/0 = SubResource("ShaderMaterial_sj54u")

[node name="visor" type="MeshInstance3D" parent="Muelto"]
transform = Transform3D(0.548982, 0, 0, 0, 0.177499, 0, 0, 6.98492e-10, 0.216165, 0, -0.358022, 0.502771)
mesh = SubResource("CapsuleMesh_wjybc")
surface_material_override/0 = SubResource("ShaderMaterial_tbmoc")

[node name="helmetLight" type="OmniLight3D" parent="Muelto/visor"]
transform = Transform3D(0.182155, 0, 0, 0, 0.563383, 0, 0, 0, 0.46261, -0.00663876, 0.0256846, 0.279731)
light_color = Color(0, 0.552941, 0.709804, 1)
light_energy = 9.267
shadow_enabled = true
omni_range = 3.419

[node name="OmniLight3D" type="OmniLight3D" parent="Muelto"]
transform = Transform3D(0.1, 0, 0, 0, 0.1, -6.98492e-10, 0, 4.65661e-10, 0.1, 0, 0.0170156, 1.43923)
omni_range = 10.0

[node name="ResurrectArea" parent="." instance=ExtResource("7_qmpat")]
