[gd_scene load_steps=13 format=3 uid="uid://dqm3qur65rpe5"]

[ext_resource type="Script" path="res://scripts/Fastgun.gd" id="1_ih04v"]
[ext_resource type="PackedScene" uid="uid://beh8hx1kednci" path="res://scenes/Weapons/bullet.tscn" id="2_t0jva"]
[ext_resource type="AudioStream" uid="uid://cxjrr02vajhl0" path="res://assets/sfx/LASRGun_Classic Blaster A Fire_03.wav" id="3_43a6g"]

[sub_resource type="BoxMesh" id="BoxMesh_twyxq"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_1n2i6"]
albedo_color = Color(0, 0, 0, 1)

[sub_resource type="Shader" id="Shader_ov20a"]
code = "shader_type spatial;
render_mode unshaded, depth_draw_opaque, depth_prepass_alpha;

// Inspired by https://godotshaders.com/shader/3d-pixel-art-outline-highlight-post-processing-shader/

uniform sampler2D DEPTH_TEXTURE : hint_depth_texture, filter_linear_mipmap;
uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
uniform sampler2D NORMAL_TEXTURE : hint_normal_roughness_texture, filter_nearest;


uniform vec3 shadow_color : source_color = vec3(0.0);
uniform float shadow_thickness = 2.0;

vec2 getDepth(vec2 screen_uv, sampler2D depth_texture, mat4 inv_projection_matrix){
	float raw_depth = texture(depth_texture, screen_uv)[0];
	vec3 normalized_device_coordinates = vec3(screen_uv * 2.0 - 1.0, raw_depth);
    vec4 view_space = inv_projection_matrix * vec4(normalized_device_coordinates, 1.0);	
	view_space.xyz /= view_space.w;	
	return vec2(-view_space.z, raw_depth);
}


void fragment() {
	vec2 e = vec2(1./VIEWPORT_SIZE.xy)*1.0;

	float depth_diff = 0.0;
	float neg_depth_diff = .5;
	
	vec2 depth_data = getDepth(SCREEN_UV, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
	float depth = depth_data.x;
	vec3 color = texture(SCREEN_TEXTURE, SCREEN_UV).rgb;
	vec3 c = vec3(0.0);
	
	vec2 min_depth_data = depth_data;
	float min_depth = 9999999.9;
	

	vec3 normal = texture(NORMAL_TEXTURE, SCREEN_UV).rgb * 2.0 - 1.0;
	
	for (float x = -shadow_thickness; x <= shadow_thickness;x += 1.0){
		for (float y = -shadow_thickness; y <= shadow_thickness; y += 1.0){
			if ((x == 0.0 && y == 0.0) || (shadow_thickness*shadow_thickness < (x*x + y*y))){
				continue;
			}
			
			vec2 du_data = getDepth(SCREEN_UV+1.0*vec2(x, y)*e, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
			vec2 dd_data = getDepth(SCREEN_UV+0.5*vec2(x, y)*e, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
			
			float du = du_data.x;
			float dd = dd_data.x;
			
			float dd_diff = clamp(abs((depth - dd) - (dd - du)), 0.0, 1.0);

			float val = clamp(abs(depth - du), 0., 1.)/(x*x + y*y)*dd_diff*dd_diff*5000.0;
			
			val = clamp(val, 0.0, 1.0);

			depth_diff += val;

			if (du < min_depth){
				min_depth = du;
				min_depth_data = du_data;
				c = texture(SCREEN_TEXTURE, SCREEN_UV+vec2(x, y)*e).rgb;
				
				c *= clamp(0.5+ 0.5*dot(normalize(vec2(x, y)), (vec2(0.0, 1.0))), 0.0, 1.0);
				
			}
			
			vec3 nu = texture(NORMAL_TEXTURE, SCREEN_UV+vec2(x, y)*e).rgb * 2.0 - 1.0;
			
			depth_diff += (1.0-abs(dot(nu, normal)))/max(min(dd, depth), 2.0);
		}
	}


	depth_diff = smoothstep(0.2, 0.3, depth_diff);

	vec3 final = c*shadow_color;
	ALBEDO = final;

	float alpha_mask = depth_diff;
	DEPTH = min_depth_data.y*alpha_mask + depth_data.y*(1.0-alpha_mask);
	ALPHA = clamp((alpha_mask) * 5., 0., 1.);

}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_exe31"]
render_priority = 0
next_pass = SubResource("StandardMaterial3D_1n2i6")
shader = SubResource("Shader_ov20a")
shader_parameter/shadow_color = Color(0, 0, 0, 1)
shader_parameter/shadow_thickness = 2.0

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_doa2l"]
albedo_color = Color(0.239216, 0.239216, 0.239216, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_f3llm"]
render_priority = 0
next_pass = SubResource("StandardMaterial3D_doa2l")
shader = SubResource("Shader_ov20a")
shader_parameter/shadow_color = Color(0, 0, 0, 1)
shader_parameter/shadow_thickness = 2.0

[sub_resource type="ShaderMaterial" id="ShaderMaterial_vea4c"]
render_priority = 0
next_pass = SubResource("StandardMaterial3D_1n2i6")
shader = SubResource("Shader_ov20a")
shader_parameter/shadow_color = Color(0, 0, 0, 1)
shader_parameter/shadow_thickness = 2.0

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_ukp70"]

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_dxrug"]
properties/0/path = NodePath(".:id")
properties/0/spawn = true
properties/0/replication_mode = 0

[node name="Gun" type="Node3D"]
transform = Transform3D(0.00607391, 8.92628e-05, -0.999982, 1.26342e-05, 1, 8.93412e-05, 0.999982, -1.31769e-05, 0.00607391, 0, 0, 0.356867)
script = ExtResource("1_ih04v")
bala = ExtResource("2_t0jva")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(0.264796, 0, -4.65661e-10, -2.27374e-13, 0.178539, -8.9706e-13, 1.04774e-09, -6.68265e-12, 0.187698, -0.142163, 1.87327e-06, -0.000863503)
mesh = SubResource("BoxMesh_twyxq")
surface_material_override/0 = SubResource("ShaderMaterial_exe31")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="."]
transform = Transform3D(1.04694, -2.27374e-13, -9.31323e-10, -5.45697e-12, 0.178532, -5.08038e-13, 6.0536e-09, -9.80016e-12, 0.190807, 0.516554, -6.80656e-06, 0.00313756)
mesh = SubResource("BoxMesh_twyxq")
surface_material_override/0 = SubResource("ShaderMaterial_f3llm")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
transform = Transform3D(0.156629, -0.215305, 0, 0.210686, 0.160063, 0, 0, 0, 0.198788, -0.238978, -0.20242, -0.00569446)
mesh = SubResource("BoxMesh_twyxq")
surface_material_override/0 = SubResource("ShaderMaterial_vea4c")

[node name="spawn" type="Marker3D" parent="."]
transform = Transform3D(1, -1.81899e-12, -1.39698e-09, -2.72848e-12, 1, -1.25482e-11, -4.65661e-10, 2.21334e-11, 1, 1.06626, -0.00153242, 0.0158086)

[node name="BalasSpawner" type="MultiplayerSpawner" parent="."]
_spawnable_scenes = PackedStringArray("res://scenes/Weapons/bullet.tscn")
spawn_path = NodePath(".")

[node name="MultiplayerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_ukp70")

[node name="ServerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_dxrug")

[node name="fire" type="AudioStreamPlayer" parent="."]
stream = ExtResource("3_43a6g")
volume_db = -19.676
